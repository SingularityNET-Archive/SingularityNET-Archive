#
# Auto Project Management Issue Creator (runs on the 1st of each month)
#
name: Auto Project Management Issue Creator

on:
  workflow_dispatch:
  schedule:
    # At 09:00 UTC on the 1st day of every month
    - cron: '0 9 1 * *'

env:
  Org: "SingularityNET-Archive"
  Repo: "SingularityNET-Archive"
  Labels: "Meetings"
  # Project ID = 1 (your organization project number)
  ProjectNumber: "1"
  # Column name inside that project where new issues should land
  ProjectColumn: "In Progress"

jobs:
  monthly-pm-creator:
    name: Create Monthly ‚ÄúProject Management‚Äù Issue
    runs-on: ubuntu-latest
    steps:

      # 1) Compute ‚Äúlast month‚Äù vs. ‚Äúcurrent month‚Äù strings
      - name: Compute Dates
        id: dates
        run: |
          # e.g. ‚ÄúJune 2025‚Äù
          PREV_MONTH_STR=$(date -d '1 month ago' '+%B %Y')
          CURR_MONTH_STR=$(date '+%B %Y')
          echo "PREV_MONTH=$PREV_MONTH_STR" >> "$GITHUB_ENV"
          echo "CURR_MONTH=$CURR_MONTH_STR" >> "$GITHUB_ENV"

      # 2) Fetch the body of last month‚Äôs issue titled ‚ÄúProject Management <PrevMonth>‚Äù
      - name: Get Last Month‚Äôs Issue Body
        id: fetch-body
        run: |
          # Build the exact title to find
          TARGET_TITLE="Project Management $PREV_MONTH"

          # Query all open issues with label=Meetings, then select by exact title match
          BODY_RAW=$(
            curl -s \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ env.Org }}/${{ env.Repo }}/issues?state=open&labels=${{ env.Labels }}" \
            | jq -r --arg TITLE "$TARGET_TITLE" '.[] | select(.title == $TITLE) | .body'
          )

          if [ -z "$BODY_RAW" ] || [ "$BODY_RAW" == "null" ]; then
            echo "No existing issue found for title: $TARGET_TITLE. Exiting."
            # Exit gracefully (no issue to copy)
            exit 78
          fi

          # Escape quotes for GitHub Action output
          BODY_ESCAPED=$(printf "%s" "$BODY_RAW" | sed 's/\"/\\"/g')

          echo "::set-output name=prev_body::$BODY_ESCAPED"

      # 3) (Optional) Extract assignees & labels from ISSUE_TEMPLATE, if you still want to reuse that
      - name: Get Default Assignees & Labels from Template
        id: extract-template
        uses: imjohnbo/extract-issue-template-fields@v1
        with:
          path: .github/ISSUE_TEMPLATE/automeetingtemplate.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4) Build the new issue title and payload
      - name: Prepare New Issue Payload
        id: payload
        run: |
          NEW_TITLE="Project Management $CURR_MONTH"
          # Insert the raw body exactly as fetched (unescaped)
          NEW_BODY="${{ steps.fetch-body.outputs.prev_body }}"

          # For safety, double-URL-encode new body so special characters don't break the CLI
          BODY_TEXT="$NEW_BODY"
          BODY_TEXT="${BODY_TEXT//'%'/'%25'}"
          BODY_TEXT="${BODY_TEXT//$'\n'/'%0A'}"
          BODY_TEXT="${BODY_TEXT//$'\r'/'%0D'}"

          echo "NEW_TITLE_ENCODED=$NEW_TITLE" >> "$GITHUB_ENV"
          echo "NEW_BODY_ENCODED=$BODY_TEXT" >> "$GITHUB_ENV"

          # Capture assignees/labels from template step
          echo "ASSIGNEES=${{ steps.extract-template.outputs.assignees }}" >> "$GITHUB_ENV"
          echo "LABELS=${{ steps.extract-template.outputs.labels }}" >> "$GITHUB_ENV"

      # 5) Create the new issue via imjohnbo/issue-bot and pin it to ‚ÄúIn Progress‚Äù
      - name: Create üîñ New Project Management Issue
        uses: imjohnbo/issue-bot@v3
        with:
          token: ${{ secrets.PAT }}
          title: ${{ env.NEW_TITLE_ENCODED }}
          body: ${{ env.NEW_BODY_ENCODED }}
          assignees: ${{ env.ASSIGNEES }}
          labels: ${{ env.LABELS }}
          project: ${{ env.ProjectNumber }}
          project_column: ${{ env.ProjectColumn }}
